generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id              String            @id @default(uuid())
    url             String            @unique
    createdAt       DateTime          @default(now())
    title           String
    postCategoryMap PostCategoryMap[]

    @@index([createdAt])
    @@fulltext([title])
}

model FeedArticle {
    id        String   @id @default(uuid())
    url       String   @unique
    createdAt DateTime @default(now())
    title     String
    feed_id   String
    feed      Feed     @relation(fields: [feed_id], references: [id], onDelete: Cascade)

    @@index([createdAt])
    @@index([feed_id])
    @@fulltext([title])
}

model PostCategory {
    id              Int               @id @default(autoincrement())
    name            String            @unique
    postCategoryMap PostCategoryMap[]
    FollowCategory  FollowCategory[]
}

model PostCategoryMap {
    id               Int          @id @default(autoincrement())
    post_category    PostCategory @relation(fields: [post_category_id], references: [id])
    post_category_id Int
    post             Post         @relation(fields: [post_id], references: [id])
    post_id          String
    createdAt        DateTime     @default(now())

    @@unique([post_category_id, post_id])
    @@index([post_category_id])
    @@index([post_id])
    @@index([createdAt])
}

model FollowCategory {
    id               String   @id @default(uuid())
    user_id          String
    post_category_id Int
    createdAt        DateTime @default(now())

    user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
    postCategory PostCategory @relation(fields: [post_category_id], references: [id], onDelete: Cascade)

    @@unique([user_id, post_category_id])
    @@index([user_id])
    @@index([post_category_id])
}

model ViewHistory {
    id       String @id @default(uuid())
    post_url String
    user_id  String

    user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([post_url, user_id])
    @@index([user_id])
}

model UserPost {
    id        String   @id @default(uuid())
    user_id   String
    url       String
    content   String?
    title     String
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    isPublic  Boolean  @default(true)

    user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    like    Like[]
    Comment Comment[]

    @@index([user_id])
    @@index([createdAt])
}

model Trends {
    id         String   @id @default(uuid())
    url        String   @unique
    title      String
    createdAt  DateTime @default(now())
    likedCount Int      @default(0)

    @@index([createdAt])
}

// default
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id              String           @id @default(cuid())
    idCreatedByUser String?          @unique
    name            String
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @default(now()) @updatedAt
    introduction    String?
    github          String?
    x               String?
    qiita           String?
    zenn            String?
    note            String?
    hatena          String?
    webSite         String?
    accounts        Account[]
    ViewHistory     ViewHistory[]
    UserPost        UserPost[]
    FollowCategory  FollowCategory[]
    like            Like[]
    Comment         Comment[]
    Notification    Notification[]
    Feed            Feed[]
    FollowFeed      FollowFeed[]
    Follow          Follow[]         @relation("UserFollowers")
    Followers       Follow[]         @relation("UserFoolows")
    Entry           Entry[]
    Bookmark        Bookmark[]
}

model Like {
    id           String   @id @default(uuid())
    user_id      String
    user_post_id String
    createdAt    DateTime @default(now())
    user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_post    UserPost @relation(fields: [user_post_id], references: [id], onDelete: Cascade)

    @@unique([user_id, user_post_id])
    @@index([user_id])
    @@index([user_post_id])
}

model Comment {
    id           String   @id @default(uuid())
    user_id      String
    user_post_id String
    content      String
    createdAt    DateTime @default(now())
    user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_post    UserPost @relation(fields: [user_post_id], references: [id], onDelete: Cascade)

    @@index([user_id])
    @@index([user_post_id])
}

model Notification {
    id        String   @id @default(uuid())
    user_id   String
    content   String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
}

model Feed {
    id          String        @id @default(uuid())
    name        String
    feedUrl     String
    FeedArticle FeedArticle[]
    createdAt   DateTime      @default(now())
    user_id     String
    user        User?         @relation(fields: [user_id], references: [id])
    FollowFeed  FollowFeed[]

    @@unique([feedUrl])
    @@index([user_id])
}

model FollowFeed {
    id        String   @id @default(uuid())
    user_id   String
    feed_id   String
    createdAt DateTime @default(now())

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    feed Feed @relation(fields: [feed_id], references: [id], onDelete: Cascade)

    @@unique([user_id, feed_id])
    @@index([user_id])
    @@index([feed_id])
}

model Follow {
    id                String   @id @default(uuid())
    user_id           String
    following_user_id String
    createdAt         DateTime @default(now())

    user           User @relation("UserFollowers", fields: [user_id], references: [id], onDelete: Cascade)
    following_user User @relation("UserFoolows", fields: [following_user_id], references: [id], onDelete: Cascade)

    @@unique([user_id, following_user_id])
    @@index([user_id])
    @@index([following_user_id])
}

model Entry {
    id        String     @id @default(uuid())
    url       String
    title     String?
    image     String?    @db.Text
    createdAt DateTime   @default(now())
    user_id   String
    user      User?      @relation(fields: [user_id], references: [id])
    Bookmark  Bookmark[]

    @@unique([url])
    @@index([url])
    @@index([user_id])
}

model Bookmark {
    id        String   @id @default(uuid())
    entry_id  String
    user_id   String
    createdAt DateTime @default(now())

    entry Entry @relation(fields: [entry_id], references: [id], onDelete: Cascade)
    user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([entry_id, user_id])
    @@index([entry_id])
    @@index([user_id])
}
